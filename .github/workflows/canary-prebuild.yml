name: Build and publish canary installer artifacts for all platforms

on:
  push:
    branches:
      - 'canary'
  workflow_dispatch:
  workflow_call:
    inputs:
      ref:
        type: string
        default: canary

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  create_canary_release:
    if: github.repository == 'frame-labs/frame-canary'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: read version from package.json
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
      - name: check for existing release
        run: gh release list --exclude-drafts | grep -q ".*v${{ steps.package-version.outputs.current-version }}" && exit 1 || true
      - name: remove old draft releases
        run: gh release list | grep -e "Draft.*v${{ steps.package-version.outputs.current-version }}" | awk '{print $3}' | uniq | xargs -r gh release delete
      - name: create release tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: canary
          custom_tag: ${{ steps.package-version.outputs.current-version }}
      - name: create new draft release
        run: gh release create v${{ steps.package-version.outputs.current-version }} --generate-notes --draft --prerelease --title ${{ steps.package-version.outputs.current-version }}

  build_release:
    needs: [create_canary_release]
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        include:
          - os: macos-11
            cert_key: APPLE_DEVELOPER_SIGNING_CERTIFICATE
            cert_password_key: APPLE_CERTIFICATE_PASSWORD
            apple_id_key: APPLE_ID
            apple_id_password_key: APPLE_ID_PASSWORD
          - os: windows-latest
            cert_key: WINDOWS_CSC_CERTIFICATE
            cert_password_key: WINDOWS_CSC_PASSWORD

    runs-on: ${{ matrix.os }}

    env:
      CSC_LINK: ${{ secrets[matrix.cert_key] }}
      CSC_KEY_PASSWORD: ${{ secrets[matrix.cert_password_key] }}
      APPLE_ID: ${{ secrets[matrix.apple_id_key] }}
      APPLE_ID_PASSWORD: ${{ secrets[matrix.apple_id_password_key] }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: 18.12.1
          cache: 'npm'
      - name: install Linux dev tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update -y
          sudo apt install -y libudev-dev
      - name: create NPM config file
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" > ./.npmrc
      - run: npm run setup:ci
      - run: npm run compile
      - run: npm run test:unit:main -- --testTimeout=5000 --verbose --detectOpenHandles --forceExit
      - run: npm run bundle
      - name: Sleep for 4 seconds
        shell: bash
        run: sleep 4
      - run: npm run publish
